
serial_port.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000073f  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000067c  00000000  00000000  0000091b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ff  00000000  00000000  00000f97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003db  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000040  00000000  00000000  000015c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z8UartInitv>:
}

void UartInit(void)
{
	// set UART0 baud rate
	UBRR0H = 0x00;
  80:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 0x67;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	// dedicate pins to USART0 for transmit and receive
	UCSR0B = 0x18;
  8a:	88 e1       	ldi	r24, 0x18	; 24
  8c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = 0x06;
  90:	86 e0       	ldi	r24, 0x06	; 6
  92:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  96:	08 95       	ret

00000098 <_Z10UartTxBytec>:
}

void UartTxByte(char data)
{
	while(!(UCSR0A & 0x20)); // wait until ready to tx
  98:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9c:	95 ff       	sbrs	r25, 5
  9e:	fc cf       	rjmp	.-8      	; 0x98 <_Z10UartTxBytec>
	UDR0 = data; // transmit byte
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a4:	08 95       	ret

000000a6 <_Z10UartRxBytev>:
}
int UartRxByte(void)
{
	int data;
	if (UCSR0A & 0x80) { // check if byte received
  a6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  aa:	88 23       	and	r24, r24
  ac:	24 f4       	brge	.+8      	; 0xb6 <_Z10UartRxBytev+0x10>
		data = UDR0; // get received byte
  ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret
	}
	else {
		data = -1; // byte not received
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return data;
  ba:	08 95       	ret

000000bc <main>:
   int rx_data;
   
    while (1) 
    {
		
		UartInit();
  bc:	0e 94 40 00 	call	0x80	; 0x80 <_Z8UartInitv>
		UartTxByte('H');
  c0:	88 e4       	ldi	r24, 0x48	; 72
  c2:	0e 94 4c 00 	call	0x98	; 0x98 <_Z10UartTxBytec>
		UartTxByte('i');
  c6:	89 e6       	ldi	r24, 0x69	; 105
  c8:	0e 94 4c 00 	call	0x98	; 0x98 <_Z10UartTxBytec>
		while(1) {
			rx_data = UartRxByte();
  cc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z10UartRxBytev>
			if (rx_data > -1) {
  d0:	99 23       	and	r25, r25
  d2:	e4 f3       	brlt	.-8      	; 0xcc <main+0x10>
				UartTxByte(rx_data);
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <_Z10UartTxBytec>
  d8:	f9 cf       	rjmp	.-14     	; 0xcc <main+0x10>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
