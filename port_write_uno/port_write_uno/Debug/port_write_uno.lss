
port_write_uno.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b4  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000625  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001bf  00000000  00000000  00000ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000106c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001453  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000149b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 67 00 	call	0xce	; 0xce <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z5Delayv>:
		
    }
}

void Delay(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	00 d0       	rcall	.+0      	; 0x86 <_Z5Delayv+0x6>
  86:	00 d0       	rcall	.+0      	; 0x88 <_Z5Delayv+0x8>
  88:	cd b7       	in	r28, 0x3d	; 61
  8a:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned long count = 100000;
  8c:	80 ea       	ldi	r24, 0xA0	; 160
  8e:	96 e8       	ldi	r25, 0x86	; 134
  90:	a1 e0       	ldi	r26, 0x01	; 1
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	89 83       	std	Y+1, r24	; 0x01
  96:	9a 83       	std	Y+2, r25	; 0x02
  98:	ab 83       	std	Y+3, r26	; 0x03
  9a:	bc 83       	std	Y+4, r27	; 0x04
	while (count--);
  9c:	89 81       	ldd	r24, Y+1	; 0x01
  9e:	9a 81       	ldd	r25, Y+2	; 0x02
  a0:	ab 81       	ldd	r26, Y+3	; 0x03
  a2:	bc 81       	ldd	r27, Y+4	; 0x04
  a4:	ac 01       	movw	r20, r24
  a6:	bd 01       	movw	r22, r26
  a8:	41 50       	subi	r20, 0x01	; 1
  aa:	51 09       	sbc	r21, r1
  ac:	61 09       	sbc	r22, r1
  ae:	71 09       	sbc	r23, r1
  b0:	49 83       	std	Y+1, r20	; 0x01
  b2:	5a 83       	std	Y+2, r21	; 0x02
  b4:	6b 83       	std	Y+3, r22	; 0x03
  b6:	7c 83       	std	Y+4, r23	; 0x04
  b8:	89 2b       	or	r24, r25
  ba:	8a 2b       	or	r24, r26
  bc:	8b 2b       	or	r24, r27
  be:	71 f7       	brne	.-36     	; 0x9c <_Z5Delayv+0x1c>
}
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	08 95       	ret

000000ce <main>:

int main(void)
{
    
	//DDRB = 0x20; // set bit 5 of DDR register which makes PB5 an output
	DDRB = 0b00100000;
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	84 b9       	out	0x04, r24	; 4
	
    while (1) 
    {
		
		PORTB = 0x20; // switch LED on
  d2:	80 e2       	ldi	r24, 0x20	; 32
  d4:	85 b9       	out	0x05, r24	; 5
		Delay();
  d6:	0e 94 40 00 	call	0x80	; 0x80 <_Z5Delayv>
		//_delay_ms(1000);
		PORTB = 0x00; // switch LED off
  da:	15 b8       	out	0x05, r1	; 5
		Delay();
  dc:	0e 94 40 00 	call	0x80	; 0x80 <_Z5Delayv>
  e0:	f8 cf       	rjmp	.-16     	; 0xd2 <main+0x4>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
