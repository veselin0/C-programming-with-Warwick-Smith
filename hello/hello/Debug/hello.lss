
hello.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00800100  00000174  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000174  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080011e  0080011e  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a3  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079a  00000000  00000000  00000b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002c7  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b4  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000035  00000000  00000000  00001a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e7       	ldi	r30, 0x74	; 116
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 31       	cpi	r26, 0x1E	; 30
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e1       	ldi	r26, 0x1E	; 30
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 32       	cpi	r26, 0x24	; 36
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b8 00 	jmp	0x170	; 0x170 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <stdio.h>
#include "stdio_setup.h"

int main(void)
{
   UartInit();
  a6:	0e 94 74 00 	call	0xe8	; 0xe8 <UartInit>
   
   printf("Hello, world!\r\n");
  aa:	8e e0       	ldi	r24, 0x0E	; 14
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	0e 94 88 00 	call	0x110	; 0x110 <puts>
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0xc>

000000b4 <UartPutchar>:
	(0 << UMSEL00);
}

void UartPutchar(char data)
{
	while(!(UCSR0A & (1 << UDRE0)));
  b4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  b8:	95 ff       	sbrs	r25, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <UartPutchar>
	UDR0 = data;
  bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c0:	08 95       	ret

000000c2 <UartGetchar>:
}

int UartGetchar(void)
{
  c2:	cf 93       	push	r28
	char data;
	
	while (!(UCSR0A & (1 << RXC0)));
  c4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <UartGetchar+0x2>
	
	data = UDR0;
  cc:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	
	if (data == '\n') {
  d0:	ca 30       	cpi	r28, 0x0A	; 10
  d2:	31 f0       	breq	.+12     	; 0xe0 <UartGetchar+0x1e>
		return -1;
	}
	UartPutchar(data);
  d4:	8c 2f       	mov	r24, r28
  d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <UartPutchar>

	return data;
  da:	8c 2f       	mov	r24, r28
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <UartGetchar+0x22>
	while (!(UCSR0A & (1 << RXC0)));
	
	data = UDR0;
	
	if (data == '\n') {
		return -1;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	9f ef       	ldi	r25, 0xFF	; 255
	}
	UartPutchar(data);

	return data;
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <UartInit>:

static FILE the_stdio = FDEV_SETUP_STREAM(UartPutchar, UartGetchar, _FDEV_SETUP_RW);

void UartInit(void)
{
	stdout = &the_stdio;
  e8:	ee e1       	ldi	r30, 0x1E	; 30
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	91 e0       	ldi	r25, 0x01	; 1
  f0:	93 83       	std	Z+3, r25	; 0x03
  f2:	82 83       	std	Z+2, r24	; 0x02
	stdin = &the_stdio;
  f4:	91 83       	std	Z+1, r25	; 0x01
  f6:	80 83       	st	Z, r24
	
	UBRR0H = UBRRH_VALUE;
  f8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = UBRRL_VALUE;
  fc:	87 e6       	ldi	r24, 0x67	; 103
  fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	#if USE_2X
	UCSR0A |= (1 << U2X0);
	#endif

	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 102:	88 e1       	ldi	r24, 0x18	; 24
 104:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 10e:	08 95       	ret

00000110 <puts>:
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end+0x2>
 11c:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0x3>
 120:	23 81       	ldd	r18, Z+3	; 0x03
 122:	21 ff       	sbrs	r18, 1
 124:	1b c0       	rjmp	.+54     	; 0x15c <puts+0x4c>
 126:	8c 01       	movw	r16, r24
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	c0 e0       	ldi	r28, 0x00	; 0
 12c:	f8 01       	movw	r30, r16
 12e:	81 91       	ld	r24, Z+
 130:	8f 01       	movw	r16, r30
 132:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <__data_end+0x2>
 136:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <__data_end+0x3>
 13a:	db 01       	movw	r26, r22
 13c:	18 96       	adiw	r26, 0x08	; 8
 13e:	ed 91       	ld	r30, X+
 140:	fc 91       	ld	r31, X
 142:	19 97       	sbiw	r26, 0x09	; 9
 144:	88 23       	and	r24, r24
 146:	31 f0       	breq	.+12     	; 0x154 <puts+0x44>
 148:	09 95       	icall
 14a:	89 2b       	or	r24, r25
 14c:	79 f3       	breq	.-34     	; 0x12c <puts+0x1c>
 14e:	df ef       	ldi	r29, 0xFF	; 255
 150:	cf ef       	ldi	r28, 0xFF	; 255
 152:	ec cf       	rjmp	.-40     	; 0x12c <puts+0x1c>
 154:	8a e0       	ldi	r24, 0x0A	; 10
 156:	09 95       	icall
 158:	89 2b       	or	r24, r25
 15a:	19 f0       	breq	.+6      	; 0x162 <puts+0x52>
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	9f ef       	ldi	r25, 0xFF	; 255
 160:	02 c0       	rjmp	.+4      	; 0x166 <puts+0x56>
 162:	8d 2f       	mov	r24, r29
 164:	9c 2f       	mov	r25, r28
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	08 95       	ret

00000170 <_exit>:
 170:	f8 94       	cli

00000172 <__stop_program>:
 172:	ff cf       	rjmp	.-2      	; 0x172 <__stop_program>
